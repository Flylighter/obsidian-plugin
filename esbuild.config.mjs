import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";
import archiver from "archiver";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const buildMode = process.argv[2];
const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ["main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins
    ],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: buildMode === "production" ? false : "inline",
    treeShaking: true,
    outfile: path.join("flylighter", "main.js"),
});

async function copyFile(src, dest) {
    return new Promise((resolve, reject) => {
        const readStream = fs.createReadStream(src);
        const writeStream = fs.createWriteStream(dest);

        readStream.on('error', reject);
        writeStream.on('error', reject);
        writeStream.on('finish', resolve);

        readStream.pipe(writeStream);
    });
}

async function zipFolder(srcFolder, zipFilePath) {
    return new Promise((resolve, reject) => {
        const output = fs.createWriteStream(zipFilePath);
        const archive = archiver('zip');

        output.on('close', resolve);
        archive.on('error', reject);

        archive.pipe(output);
        archive.directory(srcFolder, path.basename(srcFolder));
        archive.finalize();
    });
}

if (buildMode === "production" || buildMode === "action") {
    await context.rebuild();

    // Ensure the `flylighter` directory exists
    const folderName = 'flylighter';
    try {
        if (!fs.existsSync(folderName)) {
            fs.mkdirSync(folderName);
        }

        // Ensure necessary files are copied to `flylighter` directory
        await copyFile('styles.css', path.join(folderName, 'styles.css'));
        await copyFile('manifest.json', path.join(folderName, 'manifest.json'));

        // Read the version from manifest.json
        const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
        const version = manifest.version;

        // Create the zip file
        const zipFileName = `flylighter_obsidian-plugin_${version}.zip`;
        await zipFolder(folderName, zipFileName);

    } catch (err) {
        console.error('Error during production build:', err);
        process.exit(1);
    }

    process.exit(0);
} else {
    await context.watch();
}