/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FlylighterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/uri/routes.ts
function callback(url, data) {
  let formatData = JSON.stringify(data);
  let encodedData = encodeURIComponent(formatData);
  let fullUrl = url + "&data=" + encodedData;
  window.open(fullUrl, "_blank");
}
var routes = [
  {
    path: "/tags",
    params: [],
    method: "GET",
    handler: (app) => {
      return async (params) => {
        console.log("params", params);
        console.log(app);
        let tags = app.metadataCache.getTags();
        console.log("tags", tags);
        callback(params["x-success"], tags);
      };
    }
  },
  {
    path: "/files",
    params: [],
    method: "GET",
    handler: (app) => {
      return async (params) => {
        let files = Object.values(app.vault.fileMap);
        for (let file of files) {
          file.parent = null;
          file.vault = null;
          file.children = null;
        }
        console.log("files", files);
        callback(params["x-success"], files);
      };
    }
  },
  {
    path: "/properties",
    params: [],
    method: "GET",
    handler: (app) => {
      return async (params) => {
        let properties = app.metadataCache.getAllPropertyInfos();
        console.log("properties", properties);
        let propertiesWithOptions = Object.values(properties).map((prop) => {
          let options = app.metadataCache.getFrontmatterPropertyValuesForKey(
            prop.name
          );
          return { ...prop, options };
        });
        console.log("propertiesWithOptions", propertiesWithOptions);
        callback(params["x-success"], propertiesWithOptions);
      };
    }
  },
  {
    path: "/directories",
    params: [],
    method: "GET",
    handler: (app) => {
      return async (params) => {
        var _a, _b, _c;
        let iconicPluginSettings = (_c = (_b = (_a = app.plugins.plugins) == null ? void 0 : _a["iconic"]) == null ? void 0 : _b.settings) == null ? void 0 : _c.fileIcons;
        let directories = Object.values(app.vault.fileMap).filter(
          (file) => !file.extension && file.path !== "/" && !file.deleted
        ).map((fi) => {
          var _a2, _b2;
          return {
            name: fi.name,
            path: fi.path,
            icon: (_b2 = (_a2 = iconicPluginSettings == null ? void 0 : iconicPluginSettings[fi.path]) == null ? void 0 : _a2.icon) != null ? _b2 : "folder"
          };
        });
        console.log("directories", directories);
        callback(params["x-success"], directories);
      };
    }
  },
  {
    path: "/vault/info",
    params: [],
    method: "GET",
    handler: (app) => {
      return async (params) => {
        let hasPeriodicNotes = app.plugins.enabledPlugins.has("periodic-notes");
        console.log("hasPeriodicNotes", hasPeriodicNotes);
        let vaultInfo = app.vault.getConfig();
        console.log("vaultInfo", vaultInfo);
        let vaultName = app.vault.getName();
        console.log("vaultName", vaultName);
        let getFoldd = app.vault.getAllFolders();
        console.log("getFoldd", getFoldd);
        let actualInfo = app.vault.config;
        console.log("actualInfo", actualInfo);
        let returnInfo = {
          name: vaultName,
          id: app.appId
        };
        callback(params["x-success"], returnInfo);
      };
    }
  },
  {
    path: "/templates",
    params: [],
    method: "GET",
    handler: (app) => {
      return async (params) => {
        var _a, _b, _c;
        let pre_templates = (_c = (_b = (_a = app.plugins.plugins) == null ? void 0 : _a["templater-obsidian"]) == null ? void 0 : _b.settings) == null ? void 0 : _c.folder_templates;
        let templates = pre_templates.map((template) => {
          var _a2, _b2;
          console.log("template", template);
          console.log(
            "properties",
            (_a2 = app.metadataCache.getCache(template.template)) == null ? void 0 : _a2.frontmatter
          );
          console.log(
            "app.metadataCache.getFileInfo",
            app.metadataCache.getFileInfo(template.template)
          );
          console.log(
            "app.metadataCache.getFileCache",
            app.metadataCache.getFileCache(template.template)
          );
          console.log(
            "app.vault.getAbstractFileByPath",
            app.vault.getAbstractFileByPath(template.template)
          );
          return {
            path: template.folder,
            file: template.template,
            properties: (_b2 = app.metadataCache.getCache(template.template)) == null ? void 0 : _b2.frontmatter
          };
        });
        console.log("templates", templates);
        callback(params["x-success"], templates);
      };
    }
  },
  {
    path: "/capture/page",
    params: ["path", "data"],
    method: "GET",
    handler: (app) => {
      return async (params) => {
        try {
          console.log("data", params);
          let pathy = "";
          let filey = "";
          let datay = "";
          if (params.pathy) {
            pathy = decodeURIComponent(params.pathy);
          }
          if (params.file) {
            filey = decodeURIComponent(params.file);
          }
          datay = params.data;
          if (!pathy && !filey && !datay)
            return;
          console.log("pathy", pathy);
          console.log("filey", filey);
          console.log("datay", datay);
          let filePathFull = pathy + "/" + filey;
          await app.vault.create(filePathFull, datay);
        } catch (e) {
        }
      };
    }
  }
];

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var FlylighterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    let _app = this.app;
    let _vault = _app.vault;
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon(
      "dice",
      "Sample Plugin",
      (evt) => {
        new import_obsidian.Notice("This is a notice!");
      }
    );
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
    routes.forEach((route) => {
      this.registerObsidianProtocolHandler("flylighter" + route.path, route.handler(_app));
    });
    this.app.workspace.on("window-open", (win, window2) => {
      console.log("window-open", win, window2);
    });
    window.addEventListener("focus", (e) => {
      e.preventDefault();
      e.stopImmediatePropagation();
      e.stopPropagation();
      console.log("focus");
    });
    console.log("Flylighter loaded");
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText(
      (text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
        this.plugin.settings.mySetting = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
